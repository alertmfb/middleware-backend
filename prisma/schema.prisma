// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int              @id @default(autoincrement())
  email         String           @unique
  firstname     String?
  lastname      String?
  dob           DateTime?
  phoneNumber   String?
  password      String
  role          ROLE             @default(JUNIOR)
  invites       Invite[]
  has2FAEnabled Boolean          @default(true)
  mfaMethod     MFAMethod        @default(AUTHENTICATOR_APP)
  secret        TwoFASecret?
  passwordReset PasswordReset?
  Designation   Designation?     @relation(fields: [designationId], references: [id], onDelete: Cascade)
  designationId Int?
  permissions   UserPermission[]
  isSuspended   Boolean?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @default(now())
}

model Designation {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  Users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Permission {
  id        Int              @id @default(autoincrement())
  role      ROLE
  action    ACTION
  status    PermissionStatus @default(ACTIVE)
  reason    String?
  updatedAt DateTime         @updatedAt
  createdAt DateTime         @default(now())

  @@unique([role, action])
}

model UserPermission {
  id        Int              @id @default(autoincrement())
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  action    ACTION
  status    PermissionStatus @default(ACTIVE)
  reason    String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @default(now())

  @@unique([userId, action])
}

model Invite {
  id            String       @id @default(uuid())
  email         String       @unique
  invitedBy     User         @relation(fields: [inviterEmail], references: [email], onDelete: Cascade)
  inviterEmail  String
  status        InviteStatus @default(PENDING)
  role          ROLE         @default(JUNIOR)
  designationId Int?
  inviteToken   String
  invitedAt     DateTime     @default(now())
  acceptedAt    DateTime?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now())
}

model TwoFASecret {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int      @unique
  key       String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model PasswordReset {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  userEmail String   @unique
  otp       String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Message {
  id        String   @id @default(uuid())
  category  String
  channel   String
  title     String
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model PromoCode {
  id             String    @id @default(uuid())
  title          String
  key            String
  amount         Decimal   @db.Decimal(12, 2)
  usage          Int
  expirationDate DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now())
}

model Product {
  id        String   @id @default(uuid())
  name      String   @unique
  isEnabled Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

enum ROLE {
  SUPER_ADMIN
  SENIOR
  JUNIOR
  ADMIN
  MEMBER
}

enum ACTION {
  CREATE
  EDIT
  VIEW
  DELETE
}

enum PermissionStatus {
  ACTIVE
  REVOKED
}

enum InviteStatus {
  PENDING
  ACCEPTED
}

enum MFAMethod {
  AUTHENTICATOR_APP
}
